CREATE DATABASE pastelaria;
USE pastelaria;

CREATE TABLE Clientes (
    ClienteID INT PRIMARY KEY AUTO_INCREMENT,
    NomeCompleto VARCHAR(100),
    NomePreferido VARCHAR(50),
    CPF CHAR(11) UNIQUE,
    DataNascimento DATE,
    Telefone VARCHAR(15),
    Email VARCHAR(100),
    Bairro VARCHAR(100),
    Cidade VARCHAR(100),
    Estado CHAR(2)
);

CREATE TABLE Pasteis (
    PastelID INT PRIMARY KEY AUTO_INCREMENT,
    Nome VARCHAR(100),
    Preco DECIMAL(10, 2),
    Tamanho VARCHAR(50),
    Categoria VARCHAR(50)
);

CREATE TABLE Recheios (
    RecheioID INT PRIMARY KEY AUTO_INCREMENT,
    Nome VARCHAR(100)
);

CREATE TABLE Recheios_Pasteis (
    PastelID INT,
    RecheioID INT,
    FOREIGN KEY (PastelID) REFERENCES Pasteis(PastelID),
    FOREIGN KEY (RecheioID) REFERENCES Recheios(RecheioID),
    PRIMARY KEY (PastelID, RecheioID)
);


CREATE TABLE Produtos (
    ProdutoID INT PRIMARY KEY AUTO_INCREMENT,
    Nome VARCHAR(100),
    Tipo VARCHAR(50),  
    Preco DECIMAL(10, 2)
);


CREATE TABLE Pedidos (
    PedidoID INT PRIMARY KEY AUTO_INCREMENT,
    ClienteID INT,
    DataPedido DATE,
    FormaPagamento VARCHAR(50),
    FOREIGN KEY (ClienteID) REFERENCES Clientes(ClienteID)
);


CREATE TABLE Produtos_Pedidos (
    PedidoID INT,
    ProdutoID INT,
    Quantidade INT,
    FOREIGN KEY (PedidoID) REFERENCES Pedidos(PedidoID),
    FOREIGN KEY (ProdutoID) REFERENCES Produtos(ProdutoID),
    PRIMARY KEY (PedidoID, ProdutoID)
);


INSERT INTO Clientes (NomeCompleto, NomePreferido, CPF, DataNascimento, Telefone, Email, Bairro, Cidade, Estado)
VALUES
('João Silva', 'João', '12345678901', '1990-05-15', '111111111', 'joao.silva@example.com', 'Centro', 'São Paulo', 'SP'),
('Ana Pereira', 'Ana', '123.123.123-12', '1978-11-15', '(31) 93456-7890', 'ana.pereira@example.com', 'Savassi', 'Belo Horizonte', 'MG'),
('Carlos Oliveira', 'Carlos', '321.321.321-21', '1982-02-28', '(41) 97654-3210', 'carlos.oliveira@example.com', 'Batel', 'Curitiba', 'PR'),
('Lucia Santos', 'Lucia', '456.456.456-45', '1995-06-10', '(71) 91234-5678', 'lucia.santos@example.com', 'Barra', 'Salvador', 'BA'),
('Maria Silva', 'Maria', '123.456.789-00', '1985-03-12', '(11) 91234-5678', 'maria.silva@example.com', 'Centro', 'São Paulo', 'SP');

INSERT INTO Pasteis (Nome, Preco, Tamanho, Categoria)
VALUES
('Pastel de Queijo', 5.00, 'Médio', 'Vegetariano'),
('Pastel de Carne', 6.00, 'Grande', 'Tradicional'),
('Pastel de Carne', 5.50, 'Médio', 'Salgado'),
('Pastel de Queijo', 4.75, 'Pequeno', 'Salgado'),
('Pastel de Chocolate', 5.00, 'Médio', 'Doce'),
('Pastel de Carne', 6.00, 'Grande', 'Tradicional');

INSERT INTO Recheios (Nome)
VALUES
('Queijo'), ('Carne'), ('Bacon'),('Doce de Leite'),('Palmito'),('Frango com Catupiry'),('Romeu e Julieta'),('Calabresa');

INSERT INTO Recheios_Pasteis (PastelID, RecheioID)
VALUES
(1, 1), (2, 2), (2, 3),(1, 2),(3, 4),(4, 5);

DELIMITER //
CREATE PROCEDURE ListarPasteisVeganosParaAdultos()
BEGIN
    SELECT p.Nome
    FROM Pasteis p
    JOIN Produtos_Pedidos pp ON p.PastelID = pp.ProdutoID
    JOIN Pedidos ped ON pp.PedidoID = ped.PedidoID
    JOIN Clientes c ON ped.ClienteID = c.ClienteID
    WHERE p.Categoria = 'Vegano' AND TIMESTAMPDIFF(YEAR, c.DataNascimento, CURDATE()) > 18;
END //

CREATE PROCEDURE ClientesComMaiorNumeroDePedidos()
BEGIN
    SELECT c.NomeCompleto, COUNT(p.PedidoID) AS NumPedidos, YEAR(p.DataPedido) AS Ano, MONTH(p.DataPedido) AS Mes
    FROM Clientes c
    JOIN Pedidos p ON c.ClienteID = p.ClienteID
    GROUP BY c.ClienteID, Ano, Mes
    ORDER BY NumPedidos DESC;
END //

CREATE PROCEDURE PasteisComBaconOuQueijo()
BEGIN
    SELECT p.Nome
    FROM Pasteis p
    JOIN Recheios_Pasteis rp ON p.PastelID = rp.PastelID
    JOIN Recheios r ON rp.RecheioID = r.RecheioID
    WHERE r.Nome IN ('Bacon', 'Queijo');
END //
DELIMITER ;

-- Funções
DELIMITER //
CREATE FUNCTION ValorTotalVendas()
RETURNS DECIMAL(10, 2)
BEGIN
    DECLARE total DECIMAL(10, 2);
    SELECT SUM(p.Preco * pp.Quantidade) INTO total
    FROM Produtos p
    JOIN Produtos_Pedidos pp ON p.ProdutoID = pp.ProdutoID;
    RETURN total;
END //

CREATE FUNCTION PedidosComPastelEBebida()
RETURNS INT
BEGIN
    DECLARE count INT;
    SELECT COUNT(DISTINCT pp1.PedidoID) INTO count
    FROM Produtos_Pedidos pp1
    JOIN Produtos_Pedidos pp2 ON pp1.PedidoID = pp2.PedidoID
    JOIN Produtos p1 ON pp1.ProdutoID = p1.ProdutoID
    JOIN Produtos p2 ON pp2.ProdutoID = p2.ProdutoID
    WHERE p1.Tipo = 'Pastel' AND p2.Tipo IN ('Suco', 'Refrigerante');
    RETURN count;
END //

CREATE FUNCTION PasteisMaisVendidos()
RETURNS TABLE (Nome VARCHAR(100), Quantidade INT)
BEGIN
    RETURN
    SELECT p.Nome, SUM(pp.Quantidade) AS Quantidade
    FROM Pasteis p
    JOIN Produtos_Pedidos pp ON p.PastelID = pp.ProdutoID
    GROUP BY p.PastelID
    ORDER BY Quantidade DESC;
END //
DELIMITER ;

-- Gatilhos
DELIMITER //
CREATE TRIGGER AtualizaEstoqueProduto AFTER INSERT ON Produtos_Pedidos
FOR EACH ROW
BEGIN
    UPDATE Produtos
    SET Estoque = Estoque - NEW.Quantidade
    WHERE ProdutoID = NEW.ProdutoID;
END //

CREATE TRIGGER AtualizaEstoqueProdutoDelete AFTER DELETE ON Produtos_Pedidos
FOR EACH ROW
BEGIN
    UPDATE Produtos
    SET Estoque = Estoque + OLD.Quantidade
    WHERE ProdutoID = OLD.ProdutoID;
END //

CREATE TRIGGER VerificaEstoqueProduto BEFORE INSERT ON Produtos_Pedidos
FOR EACH ROW
BEGIN
    DECLARE estoqueAtual INT;
    SELECT Estoque INTO estoqueAtual FROM Produtos WHERE ProdutoID = NEW.ProdutoID;
    IF estoqueAtual < NEW.Quantidade THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Estoque insuficiente para o produto.';
    END IF;
END //

CREATE TRIGGER LogInserePedido AFTER INSERT ON Pedidos
FOR EACH ROW
BEGIN
    INSERT INTO LogPedidos (PedidoID, ClienteID, DataPedido)
    VALUES (NEW.PedidoID, NEW.ClienteID, NEW.DataPedido);
END //

CREATE TRIGGER LogDeletePedido AFTER DELETE ON Pedidos
FOR EACH ROW
BEGIN
    INSERT INTO LogPedidos (PedidoID, ClienteID, DataPedido)
    VALUES (OLD.PedidoID, OLD.ClienteID, OLD.DataPedido);
END //
DELIMITER ;

